---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mariadb-configmap
  namespace: teastore-namespace
data:

  primary.cnf: |
    [mariadb]
    log-bin                         # enable binary logging
    log-basename=mariadb-port         # used to be independent of hostname changes (otherwise is in datadir/mysql)

  replica.cnf: |
    [mariadb]
    log-basename=mariadb-port         # used to be independent of hostname changes (otherwise is in datadir/mysql)

  primary.sql: |
    CREATE USER 'teauser'@'%' IDENTIFIED BY 'teapassword';
    GRANT REPLICATION REPLICA ON *.* TO 'teauser'@'%';
    CREATE DATABASE teadb; 
    GRANT ALL PRIVILEGES ON teadb.* TO 'teauser'@'%';

  secondary.sql: |
    # We have to know name of sts (`mariadb-sts`) and 
    # service `mariadb-service` in advance as an FQDN.
    # No need to use master_port
    CHANGE MASTER TO 
    MASTER_HOST='mariadb-sts-0.mariadb-service.teastore-namespace.svc.cluster.local',
    MASTER_USER='teauser',
    MASTER_PASSWORD='teapassword',
    MASTER_CONNECT_RETRY=10;
---
apiVersion: v1
kind: Service
metadata:
  name: mariadb-service
  namespace: teastore-namespace
  labels:
    app: teastore
spec:
  ports:
  - port: 3306
    name: mariadb-port
  clusterIP: None
  selector:
    app: teastore

# Statefulset
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mariadb-sts
  namespace: teastore-namespace
spec:
  serviceName: "mariadb-service"
  replicas: 3
  selector:
    matchLabels:
      app: teastore
  template:
    metadata:
      labels:
        app: teastore
        run: sts-replicas
    spec:
      initContainers:
      - name: init-mariadb
        image: mariadb
        imagePullPolicy: Always
        command:
        - bash
        - "-c"
        - |
          set -ex
          echo 'Starting init-mariadb';
          # Check config map to directory that already exists 
          # (but must be used as a volume for main container)
          ls /mnt/config-map
          # Statefulset has sticky identity, number should be last
          [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
          ordinal=${BASH_REMATCH[1]}
          # Copy appropriate conf.d files from config-map to 
          # mariadb-config volume (emptyDir) depending on pod number
          if [[ $ordinal -eq 0 ]]; then
            # This file holds SQL for connecting to primary
            cp /mnt/config-map/primary.cnf /etc/mysql/conf.d/server-id.cnf
            # Create the users needed for replication on primary on a volume
            # initdb (emptyDir)
            cp /mnt/config-map/primary.sql /docker-entrypoint-initdb.d
          else
            # This file holds SQL for connecting to secondary
            cp /mnt/config-map/replica.cnf /etc/mysql/conf.d/server-id.cnf
            # On replicas use secondary configuration on initdb volume
            cp /mnt/config-map/secondary.sql /docker-entrypoint-initdb.d
          fi
          # Add an offset to avoid reserved server-id=0 value.
          echo server-id=$((3000 + $ordinal)) >> etc/mysql/conf.d/server-id.cnf
          ls /etc/mysql/conf.d/
          cat /etc/mysql/conf.d/server-id.cnf
        volumeMounts:
          - name: mariadb-config-map
            mountPath: /mnt/config-map
          - name: mariadb-config
            mountPath: /etc/mysql/conf.d/
          - name: initdb
            mountPath: /docker-entrypoint-initdb.d
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: run
                  operator: In
                  values:
                  - sts-replicas
              topologyKey: topology.kubernetes.io/zone
      restartPolicy: Always
      containers:
      - name: mariadb
        image: mariadb
        ports:
        - containerPort: 3306
          name: mariadb-port
        env:
        # Using Secrets
        - name: MARIADB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mariadb-secret
              key: mariadb-root-password
        - name: MYSQL_INITDB_SKIP_TZINFO
          value: "1"
        # Mount volume from persistent volume claim
        volumeMounts:
        - name: datadir
          mountPath: /var/lib/mysql/
        - name: mariadb-config
          mountPath: /etc/mysql/conf.d/
        - name: initdb
          mountPath: /docker-entrypoint-initdb.d
      volumes:
      - name: mariadb-config-map
        configMap:
          name: mariadb-configmap
          #defaultMode: 0544
      - name: mariadb-config
        emptyDir: {}
      - name: initdb
        emptyDir: {}
  volumeClaimTemplates: # dynamically creates PVCs
  - metadata:
      name: datadir
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 300M
      storageClassName: efs-sc # refers to the storage class
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: teastore-namespace
  name: teastore-registry
  labels:
    app: teastore
    run: teastore-registry
spec:
  selector:
    matchLabels:
      app: teastore
      run: teastore-registry
  template:
    metadata:
      labels:
        app: teastore
        run: teastore-registry
    spec:
      containers:
        - name: teastore-registry
          image: descartesresearch/teastore-registry
          ports:
            - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  namespace: teastore-namespace
  name: teastore-registry
  labels:
    app: teastore
    run: teastore-registry
spec:
  ports:
    - port: 8080
      protocol: TCP
  selector:
    run: teastore-registry
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: teastore-namespace
  name: teastore-persistence
  labels:
    app: teastore
    run: teastore-persistence
spec:
  selector:
    matchLabels:
      app: teastore
      run: teastore-persistence
  template:
    metadata:
      labels:
        app: teastore
        run: teastore-persistence
    spec:
      containers:
        - name: teastore-persistence
          image: descartesresearch/teastore-persistence
          ports:
            - containerPort: 8080
          env:
            - name: HOST_NAME
              value: "teastore-persistence"
            - name: REGISTRY_HOST
              value: "teastore-registry"
            - name: DB_HOST
              value: "mariadb-sts-0.mariadb-service.teastore-namespace.svc.cluster.local"
            - name: DB_PORT
              value: "3306"
---
apiVersion: v1
kind: Service
metadata:
  namespace: teastore-namespace
  name: teastore-persistence
  labels:
    app: teastore
    run: teastore-persistence
spec:
  ports:
    - port: 8080
      protocol: TCP
  selector:
    run: teastore-persistence
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: teastore-namespace
  name: teastore-auth
  labels:
    app: teastore
    run: teastore-auth
spec:
  selector:
    matchLabels:
      app: teastore
      run: teastore-auth
  template:
    metadata:
      labels:
        app: teastore
        run: teastore-auth
    spec:
      containers:
        - name: teastore-auth
          image: descartesresearch/teastore-auth
          ports:
            - containerPort: 8080
          env:
            - name: HOST_NAME
              value: "teastore-auth"
            - name: REGISTRY_HOST
              value: "teastore-registry"
---
apiVersion: v1
kind: Service
metadata:
  namespace: teastore-namespace
  name: teastore-auth
  labels:
    app: teastore
    run: teastore-auth
spec:
  ports:
    - port: 8080
      protocol: TCP
  selector:
    run: teastore-auth
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: teastore-namespace
  name: teastore-image
  labels:
    app: teastore
    run: teastore-image
spec:
  selector:
    matchLabels:
      app: teastore
      run: teastore-image
  template:
    metadata:
      labels:
        app: teastore
        run: teastore-image
    spec:
      containers:
        - name: teastore-image
          image: descartesresearch/teastore-image
          ports:
            - containerPort: 8080
          env:
            - name: HOST_NAME
              value: "teastore-image"
            - name: REGISTRY_HOST
              value: "teastore-registry"
---
apiVersion: v1
kind: Service
metadata:
  namespace: teastore-namespace
  name: teastore-image
  labels:
    app: teastore
    run: teastore-image
spec:
  ports:
    - port: 8080
      protocol: TCP
  selector:
    run: teastore-image
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: teastore-namespace
  name: teastore-recommender
  labels:
    app: teastore
    run: teastore-recommender
spec:
  selector:
    matchLabels:
      app: teastore
      run: teastore-recommender
  template:
    metadata:
      labels:
        app: teastore
        run: teastore-recommender
    spec:
      containers:
        - name: teastore-recommender
          image: descartesresearch/teastore-recommender
          ports:
            - containerPort: 8080
          env:
            - name: HOST_NAME
              value: "teastore-recommender"
            - name: REGISTRY_HOST
              value: "teastore-registry"
---
apiVersion: v1
kind: Service
metadata:
  namespace: teastore-namespace
  name: teastore-recommender
  labels:
    app: teastore
    run: teastore-recommender
spec:
  ports:
    - port: 8080
      protocol: TCP
  selector:
    run: teastore-recommender
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: teastore-namespace
  name: teastore-webui
  labels:
    app: teastore
    run: teastore-webui
spec:
  replicas: 1 
  selector:
    matchLabels:
      app: teastore
      run: teastore-webui
  template:
    metadata:
      labels:
        app: teastore
        run: teastore-webui
    spec:
      containers:
        - name: teastore-webui
          image: descartesresearch/teastore-webui
          ports:
            - containerPort: 8080
          env:
            - name: HOST_NAME
              value: "teastore-webui"
            - name: REGISTRY_HOST
              value: "teastore-registry"
---
apiVersion: v1
kind: Service
metadata:
  namespace: teastore-namespace
  name: teastore-webui
  labels:
    app: teastore
    run: teastore-webui
spec:
  type: NodePort
  ports:
    - port: 8080
      nodePort: 30080
      protocol: TCP
  selector:
    run: teastore-webui
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  namespace: teastore-namespace
  name: ingress-teastore
  annotations:
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/load-balancer-name: alb-eks
spec:
  ingressClassName: alb
  rules:
    - http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: teastore-webui
              port:
                number: 8080